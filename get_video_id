#!/usr/bin/env python3

import sys
import os
import subprocess
import json

import math

api_key_file = "~/.ydl_api_key"
num_max_result = "50"

#Currently, this function is not used.
#Example:
# print(convert_username_to_channel_id("GoogleDevelopers")) #=> "UC_x5XG1OV2P6uZZ5FSM9Ttw"
def convert_username_to_channel_id(username):

    command = [
        'curl',
        '-s',
        'https://www.googleapis.com/youtube/v3/channels?part=snippet&forUsername=' + username + '&key=' + API_key,
        '--header',
        'Accept: application/json',
        '--compressed',
    ]
    output = subprocess.check_output(command)
    json_dict = json.loads(output)

    return json_dict['items'][0]['id']

#"Uploaded Videos" is just a special kind of playlist (see |https://developers.google.com/youtube/v3/docs/playlistItems?authuser=1| for the detail).
#This function returns the id of the playlist which belongs to a channel specified by `id`.
#Example:
# print(get_uploaded_videos_playlist_id("username", "GoogleDevelopers")) #=> "UU_x5XG1OV2P6uZZ5FSM9Ttw"
# print(get_uploaded_videos_playlist_id("channel_id", "UC_x5XG1OV2P6uZZ5FSM9Ttw")) #same as above
def get_uploaded_videos_playlist_id(id_type, id):

    if (id_type == "username"):
        by_what = "forUsername=" + id
    elif (id_type == "channel_id"):
        by_what = "id=" + id
    else:
        print("The value of `id_type` is incorrect")
        return

    command = [
        'curl',
        '--silent',
        'https://www.googleapis.com/youtube/v3/channels?part=contentDetails&' + by_what + '&maxResults=' + num_max_result + '&key=' + API_key,
        '--header',
        'Accept: application/json',
        '--compressed',
    ]
    output = subprocess.check_output(command)
    json_dict = json.loads(output)

    if (json_dict['items'] == []):
        print("There exists no channel specified by [ {} ].".format(id))
        return

    return json_dict['items'][0]['contentDetails']['relatedPlaylists']['uploads']

#This function returns a list of ids of videos in a playlist specified by `playlist_id`.
#Right after a video id matches any element in `already_retrieved_video_id_list`, the function returns.
#In other words, the returned list only includes video ids which are scanned before the first match.
#Note that (if `already_retrieved_video_id_list` is empty) the first element of the list corresponds to the **latest** video.
#Per request, at most `num_max_result` ids can be got, thus this function may send multiple requests that takes a while.
#Example:
# print(get_all_video_id_in_playlist("UU_x5XG1OV2P6uZZ5FSM9Ttw", [])) #=> list of video ids
def get_all_video_id_in_playlist(playlist_id, already_retrieved_video_id_list, should_show_progress = False):

    video_id_list = []

    page_info = ""

    if (should_show_progress):
        num_total_result = 0
        num_page = 0

    i = -1

    while (True):

        i += 1

        command = [
            'curl',
            '--silent',
            'https://www.googleapis.com/youtube/v3/playlistItems?part=contentDetails' + page_info + '&maxResults=' + num_max_result + '&playlistId=' + playlist_id + '&key=' + API_key,
            '--header',
            'Accept: application/json',
            '--compressed'
        ]
        output = subprocess.check_output(command)
        json_dict = json.loads(output)

        if (i == 0 and not 'items' in json_dict):
            print("There exists no channel specified by [ {} ].".format(playlist_id))
            return

        if (should_show_progress):

            if (i == 0):
                num_total_result = int(json_dict['pageInfo']['totalResults'])
                num_page = math.ceil(num_total_result / int(num_max_result))

            if (num_page > 1):
                print("    [{}/{}] Done.".format(i + 1, num_page))

        for video in json_dict['items']:
            video_id = video['contentDetails']['videoId']
            if (video_id in already_retrieved_video_id_list):
                continue
            else:
                video_id_list.append(video_id)

        if ('nextPageToken' in json_dict):
            page_info = '&pageToken=' + json_dict['nextPageToken']
        else:
            break

    return video_id_list

#Example:
# print(get_video_title("5X13ZffwtjE")) #=> "Nina77「完全少女論」"
def get_video_title(video_id, should_append_uploaded_date = False):

    command = [
        'curl',
        '--silent',
        'https://www.googleapis.com/youtube/v3/videos?part=snippet&id=' + video_id + '&key=' + API_key,
        '--header',
        'Accept: application/json',
        '--compressed',
    ]
    output = subprocess.check_output(command)
    json_dict = json.loads(output)

    if (json_dict['items'] == []):
        print("Failed in retrieving a video id for [ {} ]. The video may have been deleted.".format(video_id))
        return

    title = json_dict['items'][0]['snippet']['title']
    if (should_append_uploaded_date):
        title += "_" + json_dict['items'][0]['snippet']['publishedAt']

    return title

if (__name__ == "__main__"):

    usage_message = "Usage:\n\
  " + sys.argv[0] + " <output file name> [<option(s)>]\n\
\n\
Option:\n\
  --username <user name>         track all uploaded videos by <user name>\n\
  --channel-id <channel id>      track all uploaded videos in <channel id>\n\
  --playlist-id <playlist id>    track all videos in <playlist id>\n\
  --with-time                    append uploaded time to a video title\n\
  --no-time                      cancel `--with-time`\n\
  -h, --help                     show this help\
"

    if (len(sys.argv) == 1 or sys.argv[1][0] == '-'): #-h, --help
        print(usage_message)
        sys.exit(0)

    print("Reading an API key from [ {} ]".format(api_key_file))
    try:
        with open(os.path.expanduser(api_key_file), "r") as f_in:
            API_key = f_in.readline()
            API_key = API_key[:-1] #remove the last newline
    except Exception as e:
        print(e)
        print("An error occurred while opening [ {} ].".format(api_key_file))
        sys.exit(1)

    input_output_file = sys.argv[1]

    #parse an input file {

    option_array = []

    youtube_dl_option_list = []

    id_type_array = []
    id_array = []

    already_retrieved_video_id_list = [] #with a number sign '#' omitted and without a title
    already_retrieved_video_id_list_original = [] #as it is

    try:

        with open(input_output_file, "r") as f_in:

            contents = f_in.readlines()

            for line in contents:

                element_array = line.split(' ')

                if (element_array[0][0] == "'"): #option line

                    option = element_array[0][1:]

                    if (option == "--username"):
                        id_type_array.append("username")
                        id_array.append(element_array[1][:-1])
                    elif (option == "--channel-id"):
                        id_type_array.append("channel_id")
                        id_array.append(element_array[1][:-1])
                    elif (option == "--playlist-id"):
                        id_type_array.append("playlist_id")
                        id_array.append(element_array[1][:-1])
                    else:
                        option_array.append(element_array[0][1:])
                        for i in range(1, len(element_array)):
                            option_array.append(element_array[i])
                        option_array[-1] = option_array[-1][:-1] #omit last newline

                elif (element_array[0][0] == '"'): #option to `youtube-dl` line

                    youtube_dl_option_list.append(line) #store it as it is

                else: #video id and title line

                    video_id = element_array[0]
                    if (video_id[0] == '#'):
                        video_id = video_id[1:]
                    already_retrieved_video_id_list.append(video_id)
                    already_retrieved_video_id_list_original.append(line)

    except:

        pass

    #} parse an input file

    #option parser {

    should_append_uploaded_date_to_title = False #--with-time, --no-time

    for i in range(2, len(sys.argv)): #`2` because `sys.argv[1]` is `<output file name>`.
        option_array.append(sys.argv[i])

    i = 0
    while (True):

        if (not i < len(option_array)):
            break

        option = option_array[i]
        has_error_occurred = False

        if (option == "--username" or option == "--channel-id" or option == "--playlist-id"):

            i += 1

            if (i < len(option_array)):
                if (not option_array[i] in id_array): #avoid duplication
                    id_array.append(option_array[i])
                    if (option == "--username"):
                        id_type_array.append("username")
                    elif (option == "--channel-id"):
                        id_type_array.append("channel_id")
                    elif (option == "--playlist-id"):
                        id_type_array.append("playlist_id")
            else:
                has_error_occurred = True

        elif (option == "--with-time"):

            should_append_uploaded_date_to_title = True

        elif (option == "--no-time"):

            should_append_uploaded_date_to_title = False

        else:
            
            print("An unknown option [ {} ] was passed.".format(option))
            sys.exit(1)

        if (has_error_occurred):
            print("An error occurred while parsing the option [ {} ].".format(option))
            sys.exit(1)

        i += 1

#     #for debug
#     print("youtube_dl_option_list:", youtube_dl_option_list)
#     print("id_type_array:", id_type_array)
#     print("id_array:", id_array)
#     print("option_array:", option_array)
#     print("already_retrieved_video_id_list:", already_retrieved_video_id_list)
#     print("already_retrieved_video_id_list_original:", already_retrieved_video_id_list_original)
#     print("should_append_uploaded_date_to_title:", should_append_uploaded_date_to_title)
#     sys.exit(1)

    #} option parser

    new_video_id_list = [] #contains newly retrieved video ids

    for i in range(0, len(id_type_array)):
        
        print("----- [{}/{}] {} ({}) start -----".format(i + 1, len(id_type_array), id_array[i], id_type_array[i]))

        if (id_type_array[i] == "playlist_id"):
            playlist_id = id_array[i]
        else:
            print("Retrieving the playlist id...")
            playlist_id = get_uploaded_videos_playlist_id(id_type_array[i], id_array[i])
            if (playlist_id == None):
                sys.exit(1)

        print("Retrieving video ids...")
        new_video_id_list_tmp = get_all_video_id_in_playlist(playlist_id, already_retrieved_video_id_list, True)
        if (new_video_id_list_tmp == None):
            sys.exit(1)
        new_video_id_list_tmp.reverse() #Reverse the order so that the first element corresponds to the oldest video.

        for id in new_video_id_list_tmp:
            new_video_id_list.append(id)

        print("------ [{}/{}] {} ({}) end ------".format(i + 1, len(id_type_array), id_array[i], id_type_array[i]))

    print("Opening [ {} ]...".format(input_output_file))

    try:

#         with open("/dev/stdout", "w") as f_out: #for debug
        with open(input_output_file, "w") as f_out:

            for i in range(0, len(id_array)):
                f_out.write("'")
                if (id_type_array[i] == "username"):
                    f_out.write("--username")
                elif (id_type_array[i] == "channel_id"):
                    f_out.write("--channel-id")
                elif (id_type_array[i] == "playlist_id"):
                    f_out.write("--playlist-id")
                f_out.write(" ")
                f_out.write(id_array[i])
                f_out.write("\n")

            if (should_append_uploaded_date_to_title):
                f_out.write("'--with-time\n")

            for i in youtube_dl_option_list:
                f_out.write(i)

            for i in already_retrieved_video_id_list_original:
                f_out.write(i)

            if (len(new_video_id_list) == 0):
                print("No new video id is appended to [ {} ].".format(input_output_file))
            else:
                print("Appending {} new video ids to the file...".format(len(new_video_id_list)))
                for i in new_video_id_list:
                    title = get_video_title(i, True)
                    title = title.replace('\n', ' ') #Rarely a video title has a newline in it, which breaks syntax of an instruction file.
                    if (title == None):
                        continue
                    else:
                        f_out.write(i + " " + title + "\n")

            print("Done.")

    except Exception as e:

        print(e)
        print("An error occurred while opening [ {} ].".format(input_output_file))
        sys.exit(1)

# vim: syntax=py

